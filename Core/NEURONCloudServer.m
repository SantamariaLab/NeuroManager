% NEURONCloudServer

classdef NEURONCloudServer < CloudServer & NeuronMachine
    methods
        function obj = NEURONCloudServer(~,...
                            hostID, hostOS, name, ipaddr, baseDir, scratchDir, ...
                            simFileSourceDir, custFileSourceDir,... 
                            modelFileSourceDir,... 
                            simType, numSims,...
                            xCompilationMachine,...
                            xCompilationScratchDir,...
                            auth, log, notificationSet, dataFunc,...
                            ~, ~, ~, ~)
            md = dataFunc(name, ipaddr);
            % Cloud create... data files don't set a name
            % so we add it here
            md.addSetting('id', name);
            obj = obj@NeuronMachine(md);
            obj = obj@CloudServer('',...
                            hostID, hostOS, name, ipaddr, baseDir, scratchDir, ...
                            simFileSourceDir, custFileSourceDir,... 
                            modelFileSourceDir,... 
                            simType, numSims,...
                            xCompilationMachine,...
                            xCompilationScratchDir,...
                            auth, log, notificationSet, dataFunc,...
                            '', '', '', '');         
            obj.md = md;
        end
        
        % ----------
        % Neuron model processing is machine-dependent. 
        % This is called from SimNeuron.
        % Refer to NeuroManagerStaging.xlsx
        function str = getCompileNeuronModelFilesStrPhaseP(obj, simulation) %#ok<INUSD>
            str = '';  
        end
        
        % ----------
        % Neuron model processing is machine-dependent. 
        % This is called from SimNeuron.
        % Since Synapse has no distinction between P and D stages
        % we pick the D stage arbitrarily to do mod file compilation
        function str = getCompileNeuronModelFilesStrPhaseD(obj, simulation) 
            str = obj.getModelFileCompileStr(simulation);
        end
        

    end
end
