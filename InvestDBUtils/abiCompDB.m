% abiCompDB - a subclass for dealing with the ABI database (and the FLIF ?)

classdef abiCompDB < investigationDB
    properties
        createSimFeatureExtractionsCmd = ...
            (['CREATE TABLE simFeatureExtractions (' ...
            'fxIDX int(11) NOT NULL AUTO_INCREMENT, ' ...
            'analysisStart double, ' ...
            'analysisDuration double, ' ...
            'adaptation double, ' ...                      
            'avgFiringRate double, ' ...
            'hasSpikes bool, ' ...                         
            'numSpikes int(11), ' ...
            'hasBursts bool, ' ...
            'numBursts int(11), ' ...
            'maxBurstiness double, ' ...
            'hasPauses bool, ' ...
            'numPauses int(11), ' ...
            'pauseFraction double, ' ...
            'delayRatio double, ' ...
            'delayTau double, ' ...
            'first_isi double, ' ...
            'mean_isi double, ' ...                             
            'isi_cv double, ' ...                              
            'f_peak double, ' ...  
            'latency double, ' ...       
            'stimulusLatency double, ' ...
            'threshold double, ' ...
            'PRIMARY KEY (fxIDX)) ENGINE=InnoDB']);

        createIpvsTableCmd = (['CREATE TABLE ipvs (' ...
            'ipvIDX int(11) NOT NULL AUTO_INCREMENT, ' ...
            'expDataSetIDX int(11) NOT NULL, ' ...
            'tstop double, ' ...
            'tstep double, ' ... 
            'taum double, ' ...
            'refrac double, ' ...
            'alpha double, ' ...
            'rM double, ' ...
            'vRest double, ' ...
            'thresholdHeight double, ' ...
            'spikeHeight double, ' ...
            'p10 double, ' ...
            'stimulusType char(100), ' ...
            'p12 double, ' ...
            'stimulusStartTime double, ' ...
            'pulseWidth double, ' ...
            'pulseCurrent double, ' ...
            'p16 double, ' ...
            'p17 double, ' ...
            'p18 double, ' ...
            'p19 double, ' ...
            'p20 double, ' ...
            'p21 double, ' ...
            'FOREIGN KEY (expDataSetIDX) REFERENCES expDataSets(expDataSetIDX), ' ...
            'PRIMARY KEY (ipvIDX)) ENGINE=InnoDB']);            

        createSimulationRunsTableCmd = (['CREATE TABLE simulationRuns (' ... 
            'runIDX int(11) NOT NULL AUTO_INCREMENT, ' ...
            'ipvIDX int(11) NOT NULL, ' ...
            'simulatorIDX int(11), ' ...
            'sessionIDX int(11) NOT NULL, ' ...
            'fxIDX int(11), ' ...
            'simSetID char(100), ' ...
            'simID char(100), ' ...
            'simSampleRate double, ' ...
            'simulationDuration double, ' ...
            'state char(100), ' ...
            'simSpecFilename char(100), ' ...
            'resultsDir varchar(400), ' ...
            'stimulusFilename char(100), ' ...
            'voltageFilename char(100), ' ...
            'spikeMarkerFilename char(100), ' ...
            'timeFilename char(100), ' ...
            'fxFilename char(100), ' ...
            'runtime double, ' ...
            'result char(20), ' ...
            'FOREIGN KEY (ipvIDX) REFERENCES ipvs(ipvIDX), ' ...
            'FOREIGN KEY (simulatorIDX) REFERENCES simulators(simulatorIDX), ' ...
            'FOREIGN KEY (sessionIDX) REFERENCES sessions(sessionIDX), ' ...
            'FOREIGN KEY (fxIDX) REFERENCES simFeatureExtractions(fxIDX), ' ...
            'PRIMARY KEY (runIDX)) ENGINE=InnoDB']);

    end
    
    methods
        %% abiCompDB
        function obj = abiCompDB(dataSourceName, databaseName, ...
                                 userName, password)
            obj = obj@investigationDB(dataSourceName, databaseName, ...
                                      userName, password);
        end
        
        %% addIPV 
        % This could be genericized someday but might lose clarity
        function ipvIndex = ...
                    addIPV(obj, expDataSetIndex, ...
                           tstop, tstep, taum, refrac, alpha, rM, ...
                           vRest, thresholdHeight, spikeHeight, p10, ...
                           stimCode, p12, stimulusStartTime, pulseWidth, ...
                           pulseCurrent, p16, p17, p18, p19, p20, p21)
            colnames = {'ipvIDX', 'expDataSetIDX', 'tstop', 'tstep', 'taum', 'refrac', ...
                        'alpha', 'rM', 'vRest', 'thresholdHeight', ...
                        'spikeHeight', 'p10', 'stimulusType', 'p12', ...
                        'stimulusStartTime', 'pulseWidth', 'pulseCurrent', ...
                        'p16', 'p17', 'p18', 'p19', 'p20', 'p21'};
            %% All this massaging needs to be designed/rewritten
            if isnan(p12)
                p12Str = 'NULL';
            else
                p12Str = num2str(p12);
            end
            if isnan(stimulusStartTime)
                stimulusStartTimeStr = 'NULL';
            else
                stimulusStartTimeStr = num2str(stimulusStartTime);
            end
            if isnan(pulseWidth)
                pulseWidthStr = 'NULL';
            else
                pulseWidthStr = num2str(pulseWidth);
            end
            if isnan(pulseCurrent)
                pulseCurrentStr = 'NULL';
            else
                pulseCurrentStr = num2str(pulseCurrent);
            end
            if isnan(p16)
                p16Str = 'NULL';
            else
                p16Str = num2str(p16);
            end
            if isnan(p17)
                p17Str = 'NULL';
            else
                p17Str = num2str(p17);
            end
            if isnan(p18)
                p18Str = 'NULL';
            else
                p18Str = num2str(p18);
            end
            if isnan(p19)
                p19Str = 'NULL';
            else
                p19Str = num2str(p19);
            end
            if isnan(p20)
                p20Str = 'NULL';
            else
                p20Str = num2str(p20);
            end
            if isnan(p21)
                p21Str = 'NULL';
            else
                p21Str = num2str(p21);
            end
            
            %%
            coldata = ...
               {num2str(expDataSetIndex), num2str(tstop), num2str(tstep), ...
                num2str(taum), num2str(refrac), ...
                num2str(alpha), num2str(rM), ...
                num2str(vRest), num2str(thresholdHeight), ...
                num2str(spikeHeight), p10, ...
                ['''' stimCode ''''], ...
                p12Str, stimulusStartTimeStr, ...
                pulseWidthStr, pulseCurrentStr, ...
                p16Str, p17Str, p18Str, p19Str, p20Str, p21Str};
            insertStr = ['insert into ipvs (' ...
                         strjoin(colnames, ', ') ') values(0, ' ...
                         strjoin(coldata, ', ') ')'];
            exec(obj.dbConn, insertStr);
            
            q = ('select ipvIDX from ipvs WHERE ipvIDX = @@IDENTITY');
            curs = exec(obj.dbConn, q);
            curs = fetch(curs);
            ipvIndex = curs.Data.ipvIDX;
            close(curs);
        end
        
        %% addSimulationRun 
        % Assumes (for now) that simulation hasn't been assigned to a
        % simulator, run, or had feature extraction done.
        function runIndex = ...
                addSimulationRun(obj, ipvIDX,  ...
                    sessionIDX, simSetID, simID, simSampleRate, ...
                    simulationDuration)
%                 , simSpecFilename)
%                 addSimulationRun(obj, ipvIDX,  ...
%                     sessionIDX, simSetID, simID, simSampleRate, ...
%                     simulationDuration, simSpecFilename, ...
%                     resultsDir, stimulusFilename, voltageFilename, ...
%                     timeFilename) %#ok<*INUSD,*INUSL>
            colnames = {'runIDX', 'ipvIDX', 'simulatorIDX', ...
                        'sessionIDX', 'fxIDX', ...
                        'simSetID', 'simID', 'simSampleRate', ...
                        'simulationDuration', 'state', ...
                        'simSpecFilename', 'resultsDir', ...
                        'stimulusFilename', 'voltageFilename', ...
                        'spikeMarkerFilename', ...
                        'timeFilename', 'fxFilename', ...
                        'runtime', 'result'};
            coldata = {num2str(ipvIDX), ...
                       'NULL', ...
                       num2str(sessionIDX),...
                       'NULL', ...
                       ['''' simSetID ''''], ...
                       ['''' simID ''''], ...
                       num2str(simSampleRate), ...
                       num2str(simulationDuration), ...
                       ['''' 'UNRUN' ''''], ...
                       ['''' simSetID '_COPY_DO_NOT_EDIT.txt'''], ...
                       'NULL', 'NULL', 'NULL', 'NULL', 'NULL', ...
                       'NULL', 'NULL', 'NULL'};
%                        ['''' strrep(resultsDir, '\', '/') ''''], ...
%                        '''iInj.dat''', ...
%                        '''voltage.dat''', ...
%                        '''time.dat''', ...
%                        '''ABIFeatures.json''', ...
%                        'NULL', 'NULL'};
            insertStr = ['insert into simulationRuns (' ...
                         strjoin(colnames, ', ') ') values(0, ' ...
                         strjoin(coldata, ', ') ')'];
            exec(obj.dbConn, insertStr);
            
            q = ['select runIDX from simulationRuns ' ...
                 'WHERE runIDX = @@IDENTITY'];
            curs = exec(obj.dbConn, q);
            curs = fetch(curs);
            runIndex = curs.Data.runIDX;
            close(curs);
        end
        

        
        function delete(obj)
            delete@investigationDB(obj);
        end
        


        
    end
end








