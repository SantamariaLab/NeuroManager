% abiCompDB - a subclass for dealing with the ABI database (and the FLIF ?)

classdef abiCompDB < investigationDB
    
    properties

    end
    
    methods
        %% abiCompDB
        function obj = abiCompDB(dataSourceName, databaseName, ...
                                 userName, password)
            obj = obj@investigationDB(dataSourceName, databaseName, ...
                                      userName, password);
            % These must be added in order of creation; dropping will be
            % done in reverse order
            obj.tableList = {'sessions', 'machines', 'simulators', 'ipvs', ...
                             'simFeatureExtractions', 'expDataSets', ...
                             'simulationRuns', 'comparisons'};
        end
        
        
        
% initialize 
%         function initialize(obj)
%             %% Drop Tables
% %             disp(['Dropping all tables']);
%             mySQLcmd = ['SET FOREIGN_KEY_CHECKS=0;'];
%             exec(obj.dbConn, mySQLcmd);
% 
%             % comparisons
%             tableName = 'comparisons';
%             mySQLcmd = ['DROP TABLE ' tableName];
%             exec(obj.dbConn, mySQLcmd);
% 
%             % simulationRuns
%             tableName = 'simulationRuns';
%             mySQLcmd = ['DROP TABLE ' tableName];
%             exec(obj.dbConn, mySQLcmd);
% 
%             % expDataSets    
%             tableName = 'expDataSets';
%             mySQLcmd = ['DROP TABLE ' tableName];
%             exec(obj.dbConn, mySQLcmd);
% 
%             % simFeatureExtractions
%             tableName = 'simFeatureExtractions';
%             mySQLcmd = ['DROP TABLE ' tableName];
%             exec(obj.dbConn, mySQLcmd);
% 
%             % ipvs
%             tableName = 'ipvs';
%             mySQLcmd = ['DROP TABLE ' tableName];
%             exec(obj.dbConn, mySQLcmd);
% 
%             % simulators
%             tableName = 'simulators';
%             mySQLcmd = ['DROP TABLE ' tableName];
%             exec(obj.dbConn, mySQLcmd);
% 
%             % machines
%             tableName = 'machines';
%             mySQLcmd = ['DROP TABLE ' tableName];
%             exec(obj.dbConn, mySQLcmd);
% 
%             % sessions
%             tableName = 'sessions';
%             mySQLcmd = ['DROP TABLE ' tableName];
%             exec(obj.dbConn, mySQLcmd);
% 
%             mySQLcmd = ['SET FOREIGN_KEY_CHECKS=1;'];
%             exec(obj.dbConn, mySQLcmd);
%             


        % ---
        function createTable(obj, tableName)
            switch(tableName)
                case 'sessions'
                    % Create sessions table
                    mySQLcmd = (['CREATE TABLE sessions (' ...
                      'sessionIDX int(11) NOT NULL AUTO_INCREMENT, ' ...
                      'dateTime char(20), ' ...
                      'customDir text, ' ...
                      'simSpecFileDir varchar(400), ' ...
                      'modelFileDir varchar(400), ' ...
                      'simResultsDir varchar(400), ' ...
                      'PRIMARY KEY (sessionIDX)) ENGINE=InnoDB']);
                case 'machines'
                    % Create machines table 
                    mySQLcmd = (['CREATE TABLE machines (' ...
                      'machineIDX int(11) NOT NULL AUTO_INCREMENT, ' ...
                      'name char(100), ' ...
                      'resourceType char(100), ' ...
                      'PRIMARY KEY (machineIDX)) ENGINE=InnoDB']);
                case 'simulators'
                    % Create simulators table
                    mySQLcmd = (['CREATE TABLE simulators (' ...
                      'simulatorIDX int(11) NOT NULL AUTO_INCREMENT, ' ...
                      'machineIDX int(11) NOT NULL, ' ...
                      'name char(200), ' ...
                      'type char(200), ' ... 
                      'version char(200), ' ...
                      'FOREIGN KEY (machineIDX) REFERENCES machines(machineIDX), ' ...
                      'PRIMARY KEY (simulatorIDX)) ENGINE=InnoDB']);
                case 'simFeatureExtractions'
                    % Create simFeatureExtractions table
                    mySQLcmd = (['CREATE TABLE simFeatureExtractions (' ...
                      'fxIDX int(11) NOT NULL AUTO_INCREMENT, ' ...
                      'analysisStart double, ' ...
                      'analysisDuration double, ' ...
                      'adaptation double, ' ...                      
                      'avgFiringRate double, ' ...
                      'hasSpikes bool, ' ...                         
                      'numSpikes int(11), ' ...
                      'hasBursts bool, ' ...
                      'numBursts int(11), ' ...
                      'maxBurstiness double, ' ...
                      'hasPauses bool, ' ...
                      'numPauses int(11), ' ...
                      'pauseFraction double, ' ...
                      'delayRatio double, ' ...
                      'delayTau double, ' ...
                      'first_isi double, ' ...
                      'mean_isi double, ' ...                             
                      'isi_cv double, ' ...                              
                      'f_peak double, ' ...  
                      'latency double, ' ...       
                      'stimulusLatency double, ' ...
                      'threshold double, ' ...
                      'PRIMARY KEY (fxIDX)) ENGINE=InnoDB']);
                case 'expDataSets'
                    % Create expDataSets table
                    mySQLcmd = (['CREATE TABLE expDataSets (' ...
                      'expDataSetIDX int(11) NOT NULL AUTO_INCREMENT, ' ... 
                      'expSpecimenID int(11), ' ... 
                      'expExperimentID int(11), ' ... 
                      'samplingRate double, ' ...
                      'expP1 char(100), ' ... 
                      'expP2 double, ' ... 
                      'expP3 double, ' ... 
                      'expP4 double, ' ... 
                      'expP5 double, ' ... 
                      'expP6 double, ' ... 
                      'expP7 double, ' ... 
                      'PRIMARY KEY (expDataSetIDX)) ENGINE=InnoDB']);
                case 'ipvs'
                    % Create ipvs table
                    mySQLcmd = (['CREATE TABLE ipvs (' ...
                      'ipvIDX int(11) NOT NULL AUTO_INCREMENT, ' ...
                      'expDataSetIDX int(11) NOT NULL, ' ...
                      'tstop double, ' ...
                      'tstep double, ' ... 
                      'taum double, ' ...
                      'refrac double, ' ...
                      'alpha double, ' ...
                      'rM double, ' ...
                      'vRest double, ' ...
                      'thresholdHeight double, ' ...
                      'spikeHeight double, ' ...
                      'p10 double, ' ...
                      'stimulusType char(100), ' ...
                      'p12 double, ' ...
                      'stimulusStartTime double, ' ...
                      'pulseWidth double, ' ...
                      'pulseCurrent double, ' ...
                      'p16 double, ' ...
                      'p17 double, ' ...
                      'p18 double, ' ...
                      'p19 double, ' ...
                      'p20 double, ' ...
                      'p21 double, ' ...
                      'FOREIGN KEY (expDataSetIDX) REFERENCES expDataSets(expDataSetIDX), ' ...
                      'PRIMARY KEY (ipvIDX)) ENGINE=InnoDB']);
                case 'simulationRuns'
                    % Create simulationRuns table
                    mySQLcmd = (['CREATE TABLE simulationRuns (' ... 
                     'runIDX int(11) NOT NULL AUTO_INCREMENT, ' ...
                     'ipvIDX int(11) NOT NULL, ' ...
                     'simulatorIDX int(11), ' ...
                     'sessionIDX int(11) NOT NULL, ' ...
                     'fxIDX int(11), ' ...
                     'simSetID char(100), ' ...
                     'simID char(100), ' ...
                     'simSampleRate double, ' ...
                     'simulationDuration double, ' ...
                     'state char(100), ' ...
                     'simSpecFilename char(100), ' ...
                     'resultsDir varchar(400), ' ...
                     'stimulusFilename char(100), ' ...
                     'voltageFilename char(100), ' ...
                     'spikeMarkerFilename char(100), ' ...
                     'timeFilename char(100), ' ...
                     'fxFilename char(100), ' ...
                     'runtime double, ' ...
                     'result char(20), ' ...
                     'FOREIGN KEY (ipvIDX) REFERENCES ipvs(ipvIDX), ' ...
                     'FOREIGN KEY (simulatorIDX) REFERENCES simulators(simulatorIDX), ' ...
                     'FOREIGN KEY (sessionIDX) REFERENCES sessions(sessionIDX), ' ...
                     'FOREIGN KEY (fxIDX) REFERENCES simFeatureExtractions(fxIDX), ' ...
                     'PRIMARY KEY (runIDX)) ENGINE=InnoDB']);
                case 'comparisons'
                    % Create comparisons table
                    mySQLcmd = (['CREATE TABLE comparisons (' ...
                      'cmpIDX int(11) NOT NULL AUTO_INCREMENT, ' ...
                      'runIDX int(11) NOT NULL, ' ...
                      'cmpType char(100), ' ...
                      'score1 double, ' ...
                      'score2 double, ' ...
                      'score3 double, ' ...
                      'score4 double, ' ...
                      'score5 double, ' ...
                      'FOREIGN KEY (runIDX) REFERENCES simulationRuns(runIDX), ' ...
                      'PRIMARY KEY (cmpIDX)) ENGINE=InnoDB']);
                otherwise
                    error(['Bad tablename received by createTable:' tableName])
            end
            exec(obj.dbConn, mySQLcmd);
        end
        
        %% addSession 
        function sessionIndex = ...
                   addSession(obj, sessionID, customDir, simSpecFileDir, ...
                              modelFileDir, simResultsDir)
            colnames = {'sessionIDX', 'dateTime', 'customDir', ...
                        'simSpecFileDir', 'modelFileDir', 'simResultsDir'};
            coldata = {sessionID, ...
                       strrep(customDir,        '\', '/'), ...
                       strrep(simSpecFileDir,   '\', '/'), ...
                       strrep(modelFileDir,     '\', '/'), ...
                       strrep(simResultsDir,    '\', '/')};
            insertStr = ['insert into sessions (' ...
                         strjoin(colnames, ', ') ') values(0, ''' ...
                         strjoin(coldata, ''', ''') ''')'];
            exec(obj.dbConn, insertStr);
            
            % Get the new session's automatically assigned index
            % Reference:
            % https://www.mathworks.com/matlabcentral/answers/
            % 93959-how-can-the-primary-key-of-the-last-record-that-was-inserted-
            % into-a-database-using-the-fastinsert-co
            q = ['select sessionIDX from sessions ' ...
                  'WHERE sessionIDX = @@IDENTITY'];
            curs = exec(obj.dbConn, q);
            curs = fetch(curs);
            temp = curs.Data;
            sessionIndex = temp.sessionIDX;
            close(curs);
        end
        
        %% addMachine 
        function machineIndex = addMachine(obj, name, resourceType)
            % Check for duplicates
            selStr = ['SELECT * FROM machines WHERE ' ...
                      'name=' ['"' name '"'] ' AND ' ...
                      'resourceType=' ['"' resourceType '"']];
            curs = exec(obj.dbConn, selStr);
            curs = fetch(curs);
            % If doesn't exist, add the entry
            if iscell(curs.Data) && strcmp(curs.Data{1}, 'No Data')
                close(curs);
                colnames = {'machineIDX', 'name', 'resourceType'};
                coldata = {name, resourceType};
                insertStr = ['insert into machines (' ...
                             strjoin(colnames, ', ') ') values(0, ''' ...
                             strjoin(coldata, ''', ''') ''')'];
                exec(obj.dbConn, insertStr);

                % Get the new index
                q2 = ['select machineIDX from machines ' ...
                      'WHERE machineIDX=@@IDENTITY'];
                curs = exec(obj.dbConn, q2);
                curs = fetch(curs);
                temp = curs.Data;
                machineIndex = temp.machineIDX;
                close(curs);
            else
                % Already exists, so just return the existing index
                machineIndex = curs.Data.machineIDX;
                close(curs);
            end
        end

        %% addSimulator 
        function simIDX = addSimulator(obj, machineIndex, name, type, version)
            % Check for duplicates
            selStr = ['SELECT * FROM simulators WHERE ' ...
                      'name=' ['"' name '"'] ' AND ' ...
                      'type=' ['"' char(type) '"'] ' AND ' ...
                      'version=' ['"' version '"']];
            curs = exec(obj.dbConn, selStr);
            curs = fetch(curs);
            % If doesn't exist, add the entry
            if iscell(curs.Data) && strcmp(curs.Data{1}, 'No Data')
                close(curs);
                colnames = {'simulatorIDX', 'machineIDX', 'name', ...
                            'type', 'version'};
                machineIndexStr = num2str(machineIndex);
                coldata = {machineIndexStr, name, char(type), version};
                insertStr = ['insert into simulators (' ...
                             strjoin(colnames, ', ') ') values(0, ''' ...
                             strjoin(coldata, ''', ''') ''')'];
                exec(obj.dbConn, insertStr);
                
                q = ['select simulatorIDX from simulators ' ...
                     'WHERE simulatorIDX=@@IDENTITY'];
                curs = exec(obj.dbConn, q);
                curs = fetch(curs);
                simIDX = curs.Data.simulatorIDX;
                close(curs);
            else
                % Already exists, so just return the existing index
                simIDX = curs.Data.simulatorIDX;
                close(curs);
            end
        end
        
        %% addExpDataSet 
        % Do nothing if the addition has already been done.
        function expDataSetIndex = ...
                    addExpDataSet(obj, specNum, expNum, sampRate, ...
                                  stimulusType, expP2, expP3, expP4, ...
                                  expP5, expP6, expP7)
            % Test for existence
            selStr = ['SELECT * FROM expDataSets WHERE ' ...
                      'expSpecimenID=' num2str(specNum) ' AND ' ...
                      'expExperimentID=' num2str(expNum)];
            curs = exec(obj.dbConn, selStr);
            curs = fetch(curs);
            % If doesn't exist, add the entry
            if iscell(curs.Data) && strcmp(curs.Data{1}, 'No Data')
                close(curs);

                % Add the entry
                colnames = {'expDataSetIDX', 'expSpecimenID', ...
                            'expExperimentID', 'samplingRate', ...
                            'expP1', 'expP2', 'expP3', 'expP4', ...
                            'expP5', 'expP6', 'expP7'};
                coldata = {num2str(specNum), num2str(expNum), ...
                           num2str(sampRate), stimulusType, ...
                           num2str(expP2), num2str(expP3), num2str(expP4), ...
                           num2str(expP5), num2str(expP6), num2str(expP7)};
                columnStr = [strjoin(colnames, ', ') ...
                             ') values(0, ''' strjoin(coldata, ''', ''') ''''];
                insertStr = ['insert into expDataSets (' columnStr ')'];
                exec(obj.dbConn, insertStr);

                q = ['select expDataSetIDX from expDataSets ' ...
                      'WHERE expDataSetIDX = @@IDENTITY'];
                curs = exec(obj.dbConn, q);
                curs = fetch(curs);
                expDataSetIndex = curs.Data.expDataSetIDX;
                close(curs);
            else
                % If it does exist, return the existing index
                expDataSetIndex = curs.Data.expDataSetIDX;
                close(curs);
            end
        end
        
        %% addIPV 
        function ipvIndex = ...
                    addIPV(obj, expDataSetIndex, ...
                           tstop, tstep, taum, refrac, alpha, rM, ...
                           vRest, thresholdHeight, spikeHeight, p10, ...
                           stimCode, p12, stimulusStartTime, pulseWidth, ...
                           pulseCurrent, p16, p17, p18, p19, p20, p21)
            colnames = {'ipvIDX', 'expDataSetIDX', 'tstop', 'tstep', 'taum', 'refrac', ...
                        'alpha', 'rM', 'vRest', 'thresholdHeight', ...
                        'spikeHeight', 'p10', 'stimulusType', 'p12', ...
                        'stimulusStartTime', 'pulseWidth', 'pulseCurrent', ...
                        'p16', 'p17', 'p18', 'p19', 'p20', 'p21'};
            %% All this massaging needs to be designed/rewritten
            if isnan(p12)
                p12Str = 'NULL';
            else
                p12Str = num2str(p12);
            end
            if isnan(stimulusStartTime)
                stimulusStartTimeStr = 'NULL';
            else
                stimulusStartTimeStr = num2str(stimulusStartTime);
            end
            if isnan(pulseWidth)
                pulseWidthStr = 'NULL';
            else
                pulseWidthStr = num2str(pulseWidth);
            end
            if isnan(pulseCurrent)
                pulseCurrentStr = 'NULL';
            else
                pulseCurrentStr = num2str(pulseCurrent);
            end
            if isnan(p16)
                p16Str = 'NULL';
            else
                p16Str = num2str(p16);
            end
            if isnan(p17)
                p17Str = 'NULL';
            else
                p17Str = num2str(p17);
            end
            if isnan(p18)
                p18Str = 'NULL';
            else
                p18Str = num2str(p18);
            end
            if isnan(p19)
                p19Str = 'NULL';
            else
                p19Str = num2str(p19);
            end
            if isnan(p20)
                p20Str = 'NULL';
            else
                p20Str = num2str(p20);
            end
            if isnan(p21)
                p21Str = 'NULL';
            else
                p21Str = num2str(p21);
            end
            
            %%
            coldata = ...
               {num2str(expDataSetIndex), num2str(tstop), num2str(tstep), ...
                num2str(taum), num2str(refrac), ...
                num2str(alpha), num2str(rM), ...
                num2str(vRest), num2str(thresholdHeight), ...
                num2str(spikeHeight), p10, ...
                ['''' stimCode ''''], ...
                p12Str, stimulusStartTimeStr, ...
                pulseWidthStr, pulseCurrentStr, ...
                p16Str, p17Str, p18Str, p19Str, p20Str, p21Str};
            insertStr = ['insert into ipvs (' ...
                         strjoin(colnames, ', ') ') values(0, ' ...
                         strjoin(coldata, ', ') ')'];
            exec(obj.dbConn, insertStr);
            
            q = ('select ipvIDX from ipvs WHERE ipvIDX = @@IDENTITY');
            curs = exec(obj.dbConn, q);
            curs = fetch(curs);
            ipvIndex = curs.Data.ipvIDX;
            close(curs);
        end
        
        %% addSimulationRun 
        % Assumes (for now) that simulation hasn't been assigned to a
        % simulator, run, or had feature extraction done.
        function runIndex = ...
                addSimulationRun(obj, ipvIDX,  ...
                    sessionIDX, simSetID, simID, simSampleRate, ...
                    simulationDuration)
%                 , simSpecFilename)
%                 addSimulationRun(obj, ipvIDX,  ...
%                     sessionIDX, simSetID, simID, simSampleRate, ...
%                     simulationDuration, simSpecFilename, ...
%                     resultsDir, stimulusFilename, voltageFilename, ...
%                     timeFilename) %#ok<*INUSD,*INUSL>
            colnames = {'runIDX', 'ipvIDX', 'simulatorIDX', ...
                        'sessionIDX', 'fxIDX', ...
                        'simSetID', 'simID', 'simSampleRate', ...
                        'simulationDuration', 'state', ...
                        'simSpecFilename', 'resultsDir', ...
                        'stimulusFilename', 'voltageFilename', ...
                        'spikeMarkerFilename', ...
                        'timeFilename', 'fxFilename', ...
                        'runtime', 'result'};
            coldata = {num2str(ipvIDX), ...
                       'NULL', ...
                       num2str(sessionIDX),...
                       'NULL', ...
                       ['''' simSetID ''''], ...
                       ['''' simID ''''], ...
                       num2str(simSampleRate), ...
                       num2str(simulationDuration), ...
                       ['''' 'UNRUN' ''''], ...
                       ['''' simSetID '_COPY_DO_NOT_EDIT.txt'''], ...
                       'NULL', 'NULL', 'NULL', 'NULL', 'NULL', ...
                       'NULL', 'NULL', 'NULL'};
%                        ['''' strrep(resultsDir, '\', '/') ''''], ...
%                        '''iInj.dat''', ...
%                        '''voltage.dat''', ...
%                        '''time.dat''', ...
%                        '''ABIFeatures.json''', ...
%                        'NULL', 'NULL'};
            insertStr = ['insert into simulationRuns (' ...
                         strjoin(colnames, ', ') ') values(0, ' ...
                         strjoin(coldata, ', ') ')'];
            exec(obj.dbConn, insertStr);
            
            q = ['select runIDX from simulationRuns ' ...
                 'WHERE runIDX = @@IDENTITY'];
            curs = exec(obj.dbConn, q);
            curs = fetch(curs);
            runIndex = curs.Data.runIDX;
            close(curs);
        end
        
        %% getIPVFromRunIDX 
        function ipvData = getIPVFromRunIDX(obj, runIDX)
            q = ['SELECT ipvs.* FROM (ipvs INNER JOIN simulationRuns ' ...
                 'ON ipvs.ipvIDX=simulationRuns.ipvIDX) ' ...
                 'WHERE simulationRuns.runIDX=' num2str(runIDX) ';'];
            setdbprefs('DataReturnFormat','structure');
            curs = exec(obj.dbConn, q);
            curs = fetch(curs);
            ipvData = curs.Data;
            ipvData.stimulusType = ipvData.stimulusType{1};
            close(curs);
        end
        
        %% getRunDataFromRunIDX 
        function runData = getRunDataFromRunIDX(obj, runIDX)
            q = ['SELECT simulationRuns.* FROM simulationRuns ' ...
                 'WHERE simulationRuns.runIDX=' num2str(runIDX) ';'];
            setdbprefs('DataReturnFormat','structure');
            curs = exec(obj.dbConn, q);
            curs = fetch(curs);
            runData = curs.Data;
            runData.simSetID = runData.simSetID{1}; 
            runData.simID = runData.simID{1}; 
            runData.state = runData.state{1}; 
            runData.simSpecFilename = runData.simSpecFilename{1}; 
            runData.resultsDir = runData.resultsDir{1}; 
            runData.stimulusFilename = runData.stimulusFilename{1}; 
            runData.voltageFilename = runData.voltageFilename{1}; 
            runData.timeFilename = runData.timeFilename{1}; 
            runData.result = runData.result{1}; 
            close(curs);
        end
        
        function delete(obj)
            delete@investigationDB(obj);
        end
        
        %% getExpDataSet
        function expDataSet = getExpDataSet(obj, specNum, expNum)
            setdbprefs('DataReturnFormat','structure');
            whereStr = ...
                ['where expDataSets.expSpecimenID=' num2str(specNum) ...
                 ' and expDataSets.expExperimentID=' num2str(expNum)];
            curs = exec(obj.dbConn, ...
                        ['select * from expDataSets ' whereStr]);
            curs = fetch(curs);
            expDataSet = curs.Data;
            close(curs);
        end
        
        %% getAllExpDataSets
        function expDataSetList = getAllExpDataSets(obj)
            setdbprefs('DataReturnFormat','structure');
            whereStr = '';
%                 ['where expDataSets.expSpecimenID=' num2str(specNum) ...
%                  ' and expDataSets.expExperimentID=' num2str(expNum)];
            curs = exec(obj.dbConn, ...
                        ['select * from expDataSets ' whereStr]);
            curs = fetch(curs);
            expDataSetList = curs.Data;
            close(curs);
        end
  
        %% addComparison 
        function compIndex = addComparison(obj, runIndex, cmpType, ...
                                    score1, score2, score3, score4, score5)
                %% Massage the results for database insertion
                if isnan(score1)
                    score1Str = 'NULL';
                else
                    % precision is important to get by MySQL input
                    score1Str = num2str(score1, 14);
                end 
                if isnan(score2)
                    score2Str = 'NULL';
                else
                    score2Str = num2str(score2);
                end 
                if isnan(score3)
                    score3Str = 'NULL';
                else
                    score3Str = num2str(score3);
                end 
                if isnan(score4)
                    score4Str = 'NULL';
                else
                    score4Str = num2str(score4);
                end 
                if isnan(score5)
                    score5Str = 'NULL';
                else
                    score5Str = num2str(score5);
                end 
                
%                 if isinf(results{i}.score1)
%                     score1Str = 'Double.MAX_VALUE';
%                 end
                % ADD MORE OF THOSE 
                % (not implemented yet)

                %% Add the comparison to the database
                colnames = {'cmpIDX', 'runIDX', ...
                            'cmpType', ...
                            'score1', 'score2', 'score3', ...
                            'score4', 'score5'};
                coldata = {num2str(runIndex), ...
                           ['''' cmpType ''''], ...
                           score1Str, score2Str, score3Str, ...
                           score4Str, score5Str};
                insertStr = ['insert into comparisons (' ...
                             strjoin(colnames, ', ') ') values(0, ' ...
                             strjoin(coldata, ', ') ')'];
                curs = exec(obj.dbConn, insertStr);
                close(curs);
            
                q = ['select cmpIDX from comparisons ' ...
                     'WHERE cmpIDX = @@IDENTITY'];
                curs = exec(obj.dbConn, q);
                curs = fetch(curs);
                compIndex = curs.Data.cmpIDX;
                close(curs);
        end

        %% getSessionComparisons 
        function comps = getSessionComparisons(obj, sessionID)
            q = ['SELECT comparisons.runIDX,' ...
                 'comparisons.score1, ' ...
                 'comparisons.score2, ' ...
                 'comparisons.score3, ' ...
                 'comparisons.score4, ' ...
                 'comparisons.score5, ' ...
                 'simulationRuns.simID ' ...
                 'FROM ((comparisons INNER JOIN simulationRuns ON ' ...
                 'comparisons.runIDX=simulationRuns.runIDX) INNER JOIN ' ...
                 'sessions ON simulationRuns.sessionIDX=sessions.sessionIDX) ' ...
                 'WHERE sessions.dateTime="' sessionID '";'];
            setdbprefs('DataReturnFormat','structure');
            curs = exec(obj.dbConn, q);
            curs = fetch(curs);
            temp = curs.Data;
            close(curs);
            for i=1:length(temp.runIDX)
                comps(i).runIDX = temp.runIDX(i); %#ok<*AGROW>
                comps(i).score1 = temp.score1(i);
                comps(i).score2 = temp.score2(i);
                comps(i).score3 = temp.score3(i);
                comps(i).score4 = temp.score4(i);
                comps(i).score5 = temp.score5(i);
                comps(i).simID = temp.simID(i);
            end
        end
        
        %% updateSessionSimSpecDir
        function updateSessionSimSpecDir(obj, sessionIndex, newDir)
            % Update the entry
            colnames = {'simSpecFileDir'};
            coldata = {newDir};
            whereStr = ['WHERE sessionIDX=' num2str(sessionIndex)];
            update(obj.dbConn, 'sessions', colnames, coldata, whereStr);
        end
            
        %% updateSimulationRun
%         function updateSimulationRun(obj, 
    end
end








